#!/usr/bin/env python3
"""
Setup script for integrating Prompt Optimizer with Qpesapay development workflow.
This script automates the setup process and creates development templates.
"""

import os
import subprocess
import sys
import json
from pathlib import Path
from typing import Dict, Any

class PromptOptimizerSetup:
    """Setup and configure Prompt Optimizer for Qpesapay development"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.tools_dir = self.project_root / "development-tools"
        self.prompt_optimizer_dir = self.tools_dir / "prompt-optimizer"
        
    def setup_directories(self):
        """Create necessary directories"""
        print("üìÅ Creating development directories...")
        self.tools_dir.mkdir(exist_ok=True)
        
        # Create prompt library directory
        prompt_lib_dir = self.project_root / "backend" / "prompts"
        prompt_lib_dir.mkdir(exist_ok=True)
        
        print(f"‚úÖ Created directories: {self.tools_dir}, {prompt_lib_dir}")
    
    def clone_prompt_optimizer(self):
        """Clone the prompt optimizer repository"""
        if self.prompt_optimizer_dir.exists():
            print("üì¶ Prompt Optimizer already exists, pulling latest changes...")
            subprocess.run(["git", "pull"], cwd=self.prompt_optimizer_dir)
        else:
            print("üì¶ Cloning Prompt Optimizer...")
            subprocess.run([
                "git", "clone", 
                "https://github.com/linshenkx/prompt-optimizer.git",
                str(self.prompt_optimizer_dir)
            ])
        
        print("‚úÖ Prompt Optimizer repository ready")
    
    def create_env_file(self):
        """Create environment file for development"""
        env_file = self.prompt_optimizer_dir / ".env"
        
        print("üîë Setting up environment configuration...")
        
        # Get API keys from user or environment
        openai_key = os.getenv("OPENAI_API_KEY") or input("Enter OpenAI API Key (optional): ").strip()
        gemini_key = os.getenv("GEMINI_API_KEY") or input("Enter Gemini API Key (optional): ").strip()
        dev_password = input("Enter development access password (optional): ").strip()
        
        env_content = f"""# Qpesapay Development Environment for Prompt Optimizer
# Generated by setup_prompt_optimizer.py

# API Keys
VITE_OPENAI_API_KEY={openai_key}
VITE_GEMINI_API_KEY={gemini_key}
VITE_DEEPSEEK_API_KEY=
VITE_ZHIPU_API_KEY=
VITE_SILICONFLOW_API_KEY=

# Development Access
ACCESS_USERNAME=qpesapay-dev
ACCESS_PASSWORD={dev_password}

# Custom API Configuration (for local testing)
VITE_CUSTOM_API_KEY=
VITE_CUSTOM_API_BASE_URL=http://localhost:8000/api/v1
VITE_CUSTOM_API_MODEL=qpesapay-financial-model
"""
        
        with open(env_file, "w") as f:
            f.write(env_content)
        
        print(f"‚úÖ Environment file created: {env_file}")
    
    def create_docker_compose_override(self):
        """Create docker-compose override for Qpesapay integration"""
        override_content = """# Docker Compose override for Qpesapay development
version: '3.8'

services:
  prompt-optimizer:
    image: linshen/prompt-optimizer:latest
    container_name: qpesapay-prompt-optimizer
    restart: unless-stopped
    ports:
      - "8081:80"  # Avoid conflict with Qpesapay backend on 8000
    env_file:
      - .env
    networks:
      - qpesapay-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prompt-optimizer.rule=Host(`prompt-optimizer.localhost`)"
      - "traefik.http.services.prompt-optimizer.loadbalancer.server.port=80"

networks:
  qpesapay-network:
    external: true
"""
        
        override_file = self.prompt_optimizer_dir / "docker-compose.qpesapay.yml"
        with open(override_file, "w") as f:
            f.write(override_content)
        
        print(f"‚úÖ Docker Compose override created: {override_file}")
    
    def create_prompt_templates(self):
        """Create Qpesapay-specific prompt templates"""
        templates = {
            "financial_analysis": {
                "name": "Financial Analysis",
                "category": "webagent",
                "description": "Analyze crypto-fiat transactions for Kenya market",
                "original": "Analyze this crypto transaction",
                "optimized": """As a Kenya-focused crypto-fiat payment specialist, analyze this transaction considering:
- CBK regulatory requirements and compliance standards
- M-Pesa integration protocols and security measures
- USDT-KES conversion rates and market conditions
- KYC/AML compliance factors and risk assessment
- Transaction security patterns and fraud detection
- Cross-border payment regulations and reporting requirements

Transaction data: {transaction_data}

Provide analysis in the following format:
1. Compliance Status: [Compliant/Non-Compliant/Requires Review]
2. Risk Level: [Low/Medium/High]
3. Regulatory Notes: [Specific CBK/CMA considerations]
4. Recommendations: [Action items or approvals needed]""",
                "context": "Used by FinancialSearchAgent for transaction analysis",
                "models_tested": ["gpt-4", "gemini-1.5-pro"],
                "performance_notes": "Optimized for Kenya financial regulations"
            },
            
            "compliance_check": {
                "name": "Compliance Verification",
                "category": "compliance",
                "description": "Comprehensive regulatory compliance checking",
                "original": "Check if this transaction is compliant",
                "optimized": """Perform comprehensive regulatory compliance analysis for Kenya financial services:

1. CBK Guidelines Verification:
   - Anti-Money Laundering (AML) requirements
   - Know Your Customer (KYC) standards
   - Foreign Exchange regulations
   - Digital payment service provider rules

2. CMA Requirements Check:
   - Securities and investment regulations
   - Capital markets compliance
   - Investor protection measures

3. Data Protection Compliance:
   - Kenya Data Protection Act compliance
   - Customer data handling protocols
   - Cross-border data transfer regulations

4. Transaction Risk Assessment:
   - Suspicious activity patterns
   - High-risk jurisdiction involvement
   - Transaction amount thresholds
   - Frequency and velocity analysis

Data to analyze: {compliance_data}

Provide detailed compliance report with specific regulatory references.""",
                "context": "Used by ComplianceAgent for regulatory verification",
                "models_tested": ["gpt-4", "deepseek-chat"],
                "performance_notes": "Includes specific Kenya regulatory framework"
            },
            
            "market_analysis": {
                "name": "Market Conditions Analysis",
                "category": "market",
                "description": "Analyze crypto-fiat market conditions for Kenya",
                "original": "What are the current market conditions?",
                "optimized": """Analyze crypto-fiat market conditions for Kenya with comprehensive focus on:

1. Exchange Rate Analysis:
   - USDT/KES current rates and trends
   - Bitcoin/KES market movements
   - Volatility patterns and predictions
   - Arbitrage opportunities

2. M-Pesa Integration Metrics:
   - Transaction volume patterns
   - Peak usage times and seasonal trends
   - Integration success rates
   - User adoption metrics

3. Regulatory Impact Assessment:
   - Recent CBK policy changes
   - CMA regulatory updates
   - Government stance on cryptocurrency
   - Banking sector collaboration trends

4. Economic Indicators:
   - Kenya Shilling stability factors
   - Inflation impact on crypto adoption
   - Cross-border remittance flows
   - Mobile money ecosystem health

5. Competitive Landscape:
   - Other crypto-fiat services in Kenya
   - Traditional banking digital initiatives
   - Fintech innovation trends
   - Market share analysis

Market data: {market_data}

Provide actionable insights for strategic decision-making.""",
                "context": "Used by MarketAnalysisAgent for strategic insights",
                "models_tested": ["gpt-4", "gemini-1.5-pro"],
                "performance_notes": "Optimized for Kenya market specifics"
            },
            
            "mpesa_integration": {
                "name": "M-Pesa Integration",
                "category": "integration",
                "description": "M-Pesa Daraja API integration and troubleshooting",
                "original": "Process M-Pesa transaction",
                "optimized": """Process M-Pesa transaction following Safaricom Daraja API best practices:

1. Transaction Validation:
   - Phone number format validation (254XXXXXXXXX)
   - Amount limits and business rules
   - Account balance verification
   - Duplicate transaction prevention

2. API Integration Protocol:
   - OAuth token management and refresh
   - STK Push request formatting
   - Callback URL handling and security
   - Error code interpretation and handling

3. Compliance Requirements:
   - Transaction logging for audit trails
   - Customer notification protocols
   - Dispute resolution procedures
   - Regulatory reporting requirements

4. Security Measures:
   - Request signature verification
   - SSL/TLS encryption standards
   - PCI DSS compliance checks
   - Fraud detection patterns

5. Performance Optimization:
   - Response time monitoring
   - Retry logic for failed transactions
   - Load balancing considerations
   - Caching strategies for frequent operations

Transaction details: {mpesa_data}

Ensure all processing follows Safaricom guidelines and CBK regulations.""",
                "context": "Used for M-Pesa Daraja API integration",
                "models_tested": ["gpt-4", "deepseek-chat"],
                "performance_notes": "Includes Safaricom API specifications"
            }
        }
        
        # Save templates to prompt library
        prompt_lib_dir = self.project_root / "backend" / "prompts"
        
        for template_id, template_data in templates.items():
            template_file = prompt_lib_dir / f"{template_id}.json"
            with open(template_file, "w") as f:
                json.dump(template_data, f, indent=2)
        
        print(f"‚úÖ Created {len(templates)} prompt templates in {prompt_lib_dir}")
    
    def create_development_scripts(self):
        """Create helper scripts for development workflow"""
        scripts_dir = self.project_root / "scripts"
        
        # Start prompt optimizer script
        start_script = scripts_dir / "start_prompt_optimizer.sh"
        start_script_content = """#!/bin/bash
# Start Prompt Optimizer for Qpesapay development

echo "üöÄ Starting Prompt Optimizer for Qpesapay development..."

cd "$(dirname "$0")/../development-tools/prompt-optimizer"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi

# Start with Qpesapay configuration
docker-compose -f docker-compose.yml -f docker-compose.qpesapay.yml up -d

echo "‚úÖ Prompt Optimizer started!"
echo "üåê Web Interface: http://localhost:8081"
echo "üîß Admin Access: Use credentials from .env file"
echo ""
echo "üí° Quick Tips:"
echo "   - Use the web interface for prompt optimization"
echo "   - Install the Chrome extension for easier access"
echo "   - Check backend/prompts/ for Qpesapay templates"
"""
        
        with open(start_script, "w") as f:
            f.write(start_script_content)
        
        start_script.chmod(0o755)
        
        print(f"‚úÖ Created development scripts: {start_script}")
    
    def run_setup(self):
        """Run the complete setup process"""
        print("üöÄ Setting up Prompt Optimizer for Qpesapay development...\n")
        
        try:
            self.setup_directories()
            self.clone_prompt_optimizer()
            self.create_env_file()
            self.create_docker_compose_override()
            self.create_prompt_templates()
            self.create_development_scripts()
            
            print("\nüéâ Setup completed successfully!")
            print("\nüìã Next Steps:")
            print("1. Run: ./scripts/start_prompt_optimizer.sh")
            print("2. Open: http://localhost:8081")
            print("3. Configure API keys in the web interface")
            print("4. Start optimizing your WebAgent prompts!")
            print("\nüìö Documentation: docs/prompt-optimizer-dev-guide.md")
            
        except Exception as e:
            print(f"‚ùå Setup failed: {e}")
            sys.exit(1)

if __name__ == "__main__":
    setup = PromptOptimizerSetup()
    setup.run_setup()
